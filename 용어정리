<참고>
HLS.js : HLS 스트리밍을 지원하기 위한 라이브러리. HLS 스트리밍에 특화. HSL 최적화되어 있고, 다른 추가 플레이어 없이도 HSL 스트리밍을 지원하는 브라우저에서 사용 가능.
가볍고, 빠르며, 구현 간단.

적합한 사용 사례:
HLS 스트리밍에만 초점을 맞출 경우
심플하고 가벼운 플레이어를 원하는 경우
빠른 성능과 쉬운 구현이 필요한 프로젝트

---

Video.js : Video.js 는 HTML5 기반의 오픈 소스 동영상 플레이어. 사용자 정의가 용이하며 플러그인을 통해 기능 확장. 다양한 비디오 포맷과 스트리밍 프로토콜 지원.
사용자 인터페이스를 쉽게 맞춤 설정할 수 있음.
대규모 커뮤니티와 풍부한 문서 지원.

적합한 사용 사례:
맞춤형 디자인이 필요한 경우
다양한 비디오 포맷과 스트리밍 프로토콜을 지원해야 하는 경우
확장성과 맞춤화가 중요한 프로젝트

----
TCP/IP를 기반으로 하는 HTTP 기반의 스트리밍 프로토콜(여기선 HLS(HTTP Live Streaming))을 사용함.

스트림 생성: 비디오 콘텐츠를 캡처하고 인코딩하는 서버 측 로직 동작.
HLS 형식으로 변환: 인코딩된 스트림을 HLS 지원 포맷(일반적으로 여러 개의 작은 .ts(Transport Stream) 파일과 하나의 .m3u8 플레이리스트 파일)으로 변환.
HTTP 서버를 통한 제공: 생성된 .ts 파일과 .m3u8 파일을 HTTP 서버를 통해 제공.
클라이언트 측 플레이어 : 사용자의 브라우저나 앱에서 이 .m3u8 플레이리스트 파일을 읽고 스트리밍 재생.

----
인코딩 >> 
OBS에서는 다양한 인코딩 설정 제공하여 스트림의 품질과 효율 조절 가능.(ex: H.264 코덱을 사용하여 스트림 인코딩 등)
OBS는 HLS와 같은 스트리밍 프로토콜 지원. 사용자가 설정한 스트리밍 서버로 비디오 스트림 전송.

---
EC2 >>
가상 서버 제공. 스트리밍 서버 호스팅하는 데 사용.

S3 >>
스케일링이 가능한 오브젝트 스토리지 서비스.
스트리밍 파일(.m3u8 및 .ts 파일)을 저장하고 서빙하는 데 사용.
높은 내구성과 가용성 보장.

CloudFront >>
AWS의 CDN 서비스.
전 세계에 분산된 엣지 로케이션을 통해 콘텐츠 전송 속도를 개선.
S3 버킷에 저장된 스트리밍 파일을 빠르게 전달하기 위해 사용됨.
