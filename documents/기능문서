

<로컬 DB 기준 스트리밍 flow>
OBS에서 비디오 컨텐츠 캡처 및 인코딩

인코딩된 스트림을 HLS 지원 포맷으로 변환

static의 videos 디렉토리로 비디오 스트림 저장.

웹사이트에 스트리밍 플레이어 설치.

static 으로부터 HLS 스트림을 로드하여 재생.
---
웹서버, 웹 애플리케이션 서버 >> 다른 용어

웹서버 : static resources 관련(이미지, 영상 등)
웹 애플리케이션 서버 : 톰캣(백엔드 로직, DB 관련)
---
OBS Studio
스트리밍 방송 시작 시 rtmp 데이터 전송 시작
rtmp 데이터를 웹서버(Nginx, 80번 포트) 디렉토리 mtn/hls 저장(rtmp 데이터로 저장)
rtmp 데이터를 Nginx에서 모듈 사용해서 hls(http live streaming)에 맞게 .m3u8 확장자 파일 전환.
.m3u8 파일이 Nginx 에서 tomcat으로 전송되어 static resources에 저장됨.
tomcat 웹페이지를 띄움(8081번 포트), hls.js 라이브러리를 사용한 동영상 플레이어를 설치.
동영상 플레이어에 tomcat controller로 /video .m3u8 파일 전송 시 영상이 재생됨.
----
<기능 우선 순위>
1순위:(핵심 기능, 꼭 있어야 하는 것들)
실시간 채팅 메시지/알림 및 메시지(채팅창)
카테고리/태그
사용자 권한 및 역할 관리

----

2순위:(있어야 하지만 급하지 않은 것)
팔로우/구독
시청 기록
비디오 추천 시스템
사용자 설정(환경 설정)

***2순위하고 나서 리팩토링, 테스트 코드 작성
-----

3순위:(있으면 좋은 것)
통계(플랫폼 사용 통계와 분석)
콘텐츠 관리 시스템
콘텐츠 검증 및 모니터링
분석 및 보고(사용자 활동, 시청 패턴, 수익 창출)
플레이리스트
-----
4순위:(surplus)
피드백(사용자 피드백 관리)
광고
댓글(게시판 등)

------------
------------

<이정표>
주제 선정
핵심 기능 구현
기획 DB
1순위 기능 구현 >>
채팅창(실시간 채팅 메시지: 채팅 기능, 알림 및 메시지, 사용자 권한 및 역할 관리)
**동영상 플레이
카테고리/태그
50%----------------
2순위 기능 구현 >>
팔로우/구독, 시청 기록, 비디오 추천 시스템, 사용자 설정(환경 설정)

리팩토링-테스트코드
70%,80%-------
3순위 기능 구현
4순위 기능 구현
문서 정리
프레젠테이션 작성
발표 준비
포트폴리오 제작
100%-------
